{"version":3,"names":[],"mappings":"","sources":["scripts.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar runtime = function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function (obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n\n\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"); // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n  };\n\n  exports.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  }; // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n\n\n  exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n\n        if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function (value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function (err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    } // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n\n  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  } // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (!info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n      context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    } // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n\n\n    context.delegate = null;\n    return ContinueSentinel;\n  } // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n\n\n  defineIteratorMethods(Gp);\n  define(Gp, toStringTagSymbol, \"Generator\"); // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n  define(Gp, iteratorSymbol, function () {\n    return this;\n  });\n  define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse(); // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      } // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    } // Return an iterator with no values.\n\n\n    return {\n      next: doneResult\n    };\n  }\n\n  exports.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function (skipTempReset) {\n      this.prev = 0;\n      this.next = 0; // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = \"next\";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function () {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function (exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n    abrupt: function (type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n    complete: function (record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" || record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n    finish: function (finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    \"catch\": function (tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      } // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function (iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  }; // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n\n  return exports;\n}( // If this script is executing as a CommonJS module, use module.exports\n// as the regeneratorRuntime namespace. Otherwise create a new empty\n// object. Either way, the resulting object will be used to initialize\n// the regeneratorRuntime variable at the top of this file.\ntypeof module === \"object\" ? module.exports : {});\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nomProp = exports.passVerify = exports.removeAttributes = exports.addAttributes = exports.createCustomElement = exports.select = void 0;\nvar id = document.getElementById.bind(document);\nvar q = document.querySelector.bind(document);\nvar all = document.querySelectorAll.bind(document);\n/**\r\n * \r\n * @param {string} elementSelector \r\n * @param {int} type \r\n * @returns DOM element\r\n */\n\nvar select = function select(elementSelector) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';\n  var domElement = '';\n\n  switch (type) {\n    case 'q':\n      domElement = q(elementSelector);\n      break;\n\n    case 'all':\n      domElement = all(elementSelector);\n      break;\n\n    default:\n      domElement = id(elementSelector);\n      break;\n  }\n\n  return domElement;\n};\n/**\r\n * Crea elementos con atributos e hijos\r\n * @param {DOM element} element \r\n * @param {string} attributes \r\n * @param {string} children \r\n * @returns DOM Element\r\n */\n\n\nexports.select = select;\n\nvar createCustomElement = function createCustomElement(element, attributes, children) {\n  var customElement = document.createElement(element);\n  if (children !== undefined) children.forEach(function (el) {\n    if (el.nodeType) {\n      if (el.nodeType === 1 || el.nodeType === 11) customElement.appendChild(el);\n    } else {\n      customElement.innerHTML += el;\n    }\n  });\n  addAttributes(customElement, attributes);\n  return customElement;\n};\n/**\r\n * Añade un objeto de atributos a un elemento\r\n * @param {DOM element} element \r\n * @param {object} attrObj \r\n */\n\n\nexports.createCustomElement = createCustomElement;\n\nvar addAttributes = function addAttributes(element, attrObj) {\n  for (var attr in attrObj) {\n    if (attrObj.hasOwnProperty(attr)) element.setAttribute(attr, attrObj[attr]);\n  }\n};\n\nexports.addAttributes = addAttributes;\n\nvar removeAttributes = function removeAttributes(element, attrObj) {\n  for (var attr in attrObj) {\n    if (attrObj.hasOwnProperty(attr)) element.removeAttribute(attr, attrObj[attr]);\n  }\n};\n\nexports.removeAttributes = removeAttributes;\n\nvar passVerify = function passVerify(pass1, pass2) {\n  var passOk;\n\n  if (pass1 == '' && pass2 == '') {\n    passOk = false;\n  } else {\n    pass1 === pass2 ? passOk = true : passOk = false;\n  }\n\n  return passOk;\n};\n\nexports.passVerify = passVerify;\n\nvar nomProp = function nomProp(string) {\n  var newString = [];\n  string.split(' ').forEach(function (word) {\n    word.toLowerCase();\n    newString.push(word.charAt(0).toUpperCase() + word.slice(1).toLowerCase());\n  });\n  return newString.toString().replace(',', '');\n};\n\nexports.nomProp = nomProp;\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar get = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var options, currentPosition, data;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = {\n              enableHighAccuracy: true,\n              //default false\n              timeout: 5000,\n              //default 0\n              maximumAge: 0 // default 0\n\n            };\n\n            if (navigator.geolocation) {\n              _context.next = 5;\n              break;\n            }\n\n            console.warn('La geolocalización no está disponible');\n            _context.next = 16;\n            break;\n\n          case 5:\n            currentPosition = function currentPosition() {\n              return new Promise(function (resolve, reject) {\n                return navigator.geolocation.getCurrentPosition(resolve, reject, options);\n              });\n            };\n\n            _context.prev = 6;\n            _context.next = 9;\n            return currentPosition();\n\n          case 9:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](6);\n            console.log(_context.t0);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 13]]);\n  }));\n\n  return function get() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar _default = get;\nexports.default = _default;\n\n},{}],4:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.postData = void 0;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar postData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(uri, method, data) {\n    var header, postData, response;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            header = new Headers();\n            header.append('Content-Type', 'application/json');\n            postData = {\n              method: method,\n              headers: header,\n              body: JSON.stringify(data)\n            };\n            _context.next = 5;\n            return fetch(uri, postData);\n\n          case 5:\n            _context.next = 7;\n            return _context.sent.json();\n\n          case 7:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function postData(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.postData = postData;\n\n},{}],5:[function(require,module,exports){\n\"use strict\";\n\nvar _dom = require(\"./modules/dom\");\n\nvar _regeneratorRuntime = _interopRequireDefault(require(\"regenerator-runtime\"));\n\nvar _postData = require(\"./modules/postData\");\n\nvar _geolocation = _interopRequireDefault(require(\"./modules/geolocation\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar signinForm = (0, _dom.select)('signinForm');\nvar signupForm = (0, _dom.select)('signupForm');\nvar searchForm = (0, _dom.select)('searchForm'); // Prepara el registro de los usuarios\n\nvar signup = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.default.mark(function _callee(userData) {\n    var data;\n    return _regeneratorRuntime.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return (0, _postData.postData)('/signup', 'POST', userData);\n\n          case 2:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function signup(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); // Envía el formulario de registro y recibe respuesta del servidor\n\n\nif (signupForm) {\n  signupForm.addEventListener('submit', function (e) {\n    e.preventDefault();\n    (0, _dom.addAttributes)(btnSubmit, {\n      disabled: ''\n    }); // Establece el boton como habilitado\n\n    btnSubmit.value = 'Registrando...';\n    var passwordOk = (0, _dom.passVerify)(password.value, passwordVerify.value);\n    var data = {\n      fullName: (0, _dom.nomProp)(firstname.value) + ' ' + (0, _dom.nomProp)(lastname.value),\n      username: email.value.substr(0, email.value.indexOf('@')).toLowerCase(),\n      email: email.value.toLowerCase(),\n      password: passwordOk,\n      gender: (0, _dom.nomProp)(signupForm.gender.value)\n    };\n    passwordOk === true ? data.password = password.value : data.password = '';\n    signup(data).then(function (data) {\n      if (data.type === 'error' || data.type === 'empty') {\n        messages.classList.remove('text-success');\n        messages.classList.add('text-danger');\n        (0, _dom.removeAttributes)(btnSubmit, {\n          disabled: ''\n        }); // Establece el boton como habilitado\n\n        btnSubmit.value = 'Registrarse';\n      } else {\n        messages.classList.remove('text-danger');\n        messages.classList.add('text-success');\n        (0, _dom.removeAttributes)(btnSubmit, {\n          disabled: ''\n        }); // Establece el boton como habilitado\n\n        btnSubmit.value = 'Registrarse';\n        signupForm.reset();\n        window.location.href = '/';\n      }\n\n      messages.classList.remove('visually-hidden');\n      messages.innerHTML = data.message;\n    }).catch(function (error) {\n      console.log('Error: ' + error);\n      btnSubmit.value = 'Registrarse';\n    });\n  });\n} // Prepara el inicio de sesión de los usuarios\n\n\nvar signin = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.default.mark(function _callee2(userData) {\n    var data;\n    return _regeneratorRuntime.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return (0, _postData.postData)('/signin', 'POST', userData);\n\n          case 2:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function signin(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // Envía formulario inicio de sesión y recibe respuesta del servidor\n\n\nif (signinForm) {\n  signinForm.addEventListener('submit', function (e) {\n    e.preventDefault();\n    btnSubmit.value = '...Iniciando';\n    (0, _dom.addAttributes)(btnSubmit, {\n      disabled: ''\n    }); // Establece el boton como deshabilitado\n\n    var data = {\n      username: username.value,\n      password: password.value\n    };\n    signin(data).then(function (data) {\n      if (data.type === 'error' || data.type === 'empty') {\n        messages.classList.remove('text-success');\n        messages.classList.add('text-danger');\n        btnSubmit.value = 'Iniciar Sesión';\n        (0, _dom.removeAttributes)(btnSubmit, {\n          disabled: ''\n        }); // Establece el boton como habilitado\n      } else {\n        btnSubmit.value = '...Iniciando';\n        messages.classList.remove('text-danger');\n        messages.classList.add('text-success');\n        window.location.href = '/';\n      }\n\n      messages.classList.remove('visually-hidden');\n      messages.innerHTML = data.message;\n    }).catch(function (error) {\n      console.log(error);\n    });\n  });\n} // Prepara la búsqueda\n\n\nvar search = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.default.mark(function _callee3(searchValue) {\n    var data;\n    return _regeneratorRuntime.default.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return (0, _postData.postData)('/search', 'POST', searchValue);\n\n          case 2:\n            data = _context3.sent;\n            return _context3.abrupt(\"return\", data);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function search(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}(); // Envía formulario de búsqueda y recibe respuesta del servidor\n\n\nif (searchForm) {\n  // Configruración del botón clear\n  btnClear.addEventListener('click', function (e) {\n    // Oculta los resultados\n    // vacía la barra de búsqueda\n    searchBar.value = ''; // Oculta el botón clear\n\n    btnClear.classList.add('visually-hidden'); // Oculta los resultados\n\n    resultsData.classList.add('visually-hidden'); // Marca como cerrado el buscador\n\n    searchContainer.classList.remove('open');\n  }); // Definimos las variables del entorno del buscador\n\n  var LIMIT = 10,\n      NEXT = 0,\n      PREV = 0;\n  document.addEventListener(\"keydown\", function (e) {\n    var myList = document.querySelectorAll('#searchResults .list-group-item');\n\n    if (myList) {\n      if (e.key === 'ArrowDown') {\n        NEXT < LIMIT - 1 ? NEXT++ : NEXT = 0; // Asigna un valor a NEXT para el elemento siguiente\n\n        NEXT === 0 ? PREV = LIMIT - 1 : PREV = NEXT - 1; // Asigna un valor a PREV para el elemento anterior \n\n        myList[NEXT].classList.add(\"search-item__active\"); // Marca como activo el elemento de la lista de resultados\n\n        if (myList.length > 1) {\n          PREV > -1 ? myList[PREV].classList.remove(\"search-item__active\") : null; // Desmarca el elemento actibo anterior\n        }\n      } else if (e.key === 'ArrowUp') {\n        NEXT <= 0 ? NEXT = LIMIT - 1 : NEXT--; // Asigna un valor a NEXT para el elemento Anterior\n\n        NEXT < LIMIT - 1 ? PREV = NEXT + 1 : PREV = 0;\n        myList[NEXT].classList.add(\"search-item__active\");\n\n        if (myList.length > 1) {\n          PREV > -1 ? myList[PREV].classList.remove(\"search-item__active\") : null; // Desmarca el elemento actibo anterior\n        }\n      }\n    }\n  });\n  var timeout = null;\n  var searchValue = '';\n  var TIMEOUT = 350; // tiempo que retrasa la consuta\n\n  var ilegalKeys = [' ', 'Control', 'Tab', 'CapsLock', 'Shift', 'Alt', 'Meta', 'AltGraph', 'ContextMenu', 'ArrowUp', 'ArrowRight', 'ArrowDown', 'ArrowLeft', 'Insert', 'Home', 'PageUp', 'Delete', 'End', 'PageDown', 'PrintScreen', 'ScrollLock', 'Pause']; // Evento cuando se levanta una tecla\n\n  searchBar.addEventListener('keyup', function (e) {\n    if (!ilegalKeys.includes(e.key)) {\n      // Muestra el boton clear\n      btnClear.classList.remove('visually-hidden'); // Muestra el spinner\n\n      searchSpinner.classList.remove('visually-hidden'); // Oculta el icono de búsqueda\n\n      searchIcon.classList.add('visually-hidden');\n      clearTimeout(timeout);\n      timeout = setTimeout(function () {\n        searchValue = searchBar.value.trim();\n\n        if (searchValue === '') {\n          // ocultar los resultados\n          // Oculta el botón clear\n          btnClear.classList.add('visually-hidden'); // ocultar el spinner\n\n          searchSpinner.classList.add('visually-hidden'); // Muestra el icono de búsqueda\n\n          searchIcon.classList.remove('visually-hidden'); // Oculta los resultados\n\n          resultsData.classList.add('visually-hidden'); // Marca como cerrado el buscador\n\n          searchContainer.classList.remove('open');\n        } else {\n          // Enviar formulario yrecibir la respuesta\n          search({\n            searchValue: searchValue\n          }).then(function (response) {\n            // Oculta el spinner\n            searchSpinner.classList.add('visually-hidden'); // muestra el icono de búsqueda\n\n            searchIcon.classList.remove('visually-hidden'); // Muestra los resultados\n\n            resultsData.classList.remove('visually-hidden'); // Marca como abierto el buscador\n\n            searchContainer.classList.add('open'); // Reinicializamos las variables\n\n            NEXT = 0;\n            PREV = 0;\n\n            if (response.message.length <= LIMIT || response.message.length === 1 || response.message.length === 0) {\n              LIMIT = response.message.length;\n            } else {\n              LIMIT = 10;\n            }\n\n            if (response.message.length > 0) {\n              // Si obtuvo algún resultado\n              // Limpiamos los resultados anteriores\n              searchResults.innerHTML = '';\n              resultsMessage.innerHTML = ''; // Mostramos estados de resultados\n\n              resultsState.innerHTML = \"<div class=\\\"text-muted small text-end me-3\\\">Mostrando \".concat(LIMIT, \" resultados de \").concat(response.message.length, \"</div>\");\n\n              for (var i = 0; i < LIMIT; i++) {\n                var result = response.message[i];\n\n                if (result != undefined) {\n                  var content = \"<span class=\\\"text-truncate\\\" title=\\\"\".concat(result.fullName, \"\\\">\").concat(result.fullName, \"</span>\");\n                  var listItem = (0, _dom.createCustomElement)('a', {\n                    href: \"/cliente/\".concat(result.customerCode),\n                    class: 'align-item-center list-group-item d-flex list-group-item-action border-0'\n                  }, [content]);\n                  searchResults.appendChild(listItem);\n                }\n              }\n\n              var myList = document.querySelectorAll('#searchResults .list-group-item');\n              myList[0].classList.add(\"search-item__active\");\n            } else {\n              // si no obtuvo resultados\n              // Limpiamos los resultados anteriores\n              searchResults.innerHTML = '';\n              resultsState.innerHTML = ''; // Mostramos mensaje sin resultados\n\n              resultsMessage.innerHTML = \"<div class=\\\"text-secondary text-center fw-semibold\\\">Al parecer, no hay buenas coincidencias para tu b\\xFAsqueda</div>\";\n            }\n          }).catch(function (error) {\n            console.log(error);\n          });\n        }\n      }, TIMEOUT);\n    }\n  }); // Evento cuando se se envía el formulario con submit\n\n  searchForm.addEventListener('submit', function (e) {\n    e.preventDefault(); // Enviamos al usuario al perfil del clienteseleciononado previamene en los resultados de búsqueda\n\n    var el = document.querySelector('.search-item__active');\n    location.href = el.href;\n  });\n}\n\n(0, _geolocation.default)().then(function (res) {\n  return console.log(res);\n});\n\n},{\"./modules/dom\":2,\"./modules/geolocation\":3,\"./modules/postData\":4,\"regenerator-runtime\":1}]},{},[5]);\n"],"file":"scripts.js"}